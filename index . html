<!DOCTYPE html>
<html>
<head>
    <title>Tracker GPS Forçado</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: #f0f0f0;
        }
        button {
            font-size: 24px;
            padding: 20px;
            margin: 10px;
            width: 100%;
            border: none;
            border-radius: 10px;
            cursor: pointer;
        }
        #forceBtn {
            background: #d32f2f;
            color: white;
        }
        #startBtn {
            background: #388e3c;
            color: white;
            display: none;
        }
        .status {
            padding: 15px;
            margin: 20px 0;
            background: white;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <button id="forceBtn" onclick="forceTracking()">ATIVAR RASTREAMENTO FORÇADO</button>
    <button id="startBtn" onclick="startTracking()">INICIAR GRAVAÇÃO DO TRAJETO</button>
    <div class="status" id="status">Status: Aguardando ativação</div>
    <div id="data"></div>

    <script>
        let isTracking = false;
        let watchId = null;
        let hasPermission = false;
        
        // Função crítica para bypass de permissões
        async function forceTracking() {
            try {
                // Método 1: Solicitação padrão
                const position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject, {
                        enableHighAccuracy: true,
                        timeout: 5000
                    });
                });
                
                hasPermission = true;
                showStatus('Permissão concedida!', 'green');
                document.getElementById('startBtn').style.display = 'block';
                updateData(position);
                
            } catch (error) {
                // Método 2: Fallback experimental
                try {
                    await requestPermission();
                    hasPermission = true;
                    showStatus('Acesso obtido via fallback!', 'green');
                    document.getElementById('startBtn').style.display = 'block';
                } catch (fallbackError) {
                    showStatus(ERRO: ${getErrorText(fallbackError.code)}, 'red');
                    enableAdvancedSettings();
                }
            }
        }

        async function requestPermission() {
            return new Promise((resolve, reject) => {
                if (!navigator.permissions) reject(new Error('API não suportada'));
                
                navigator.permissions.query({ name: 'geolocation' }).then(result => {
                    if (result.state === 'granted') {
                        resolve();
                    } else {
                        reject(new Error('Permissão negada'));
                    }
                });
            });
        }

        function startTracking() {
            if (!hasPermission) return;
            
            watchId = navigator.geolocation.watchPosition(
                position => {
                    updateData(position);
                    recordPosition(position);
                },
                error => showStatus(ERRO: ${getErrorText(error.code)}, 'red'),
                {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 10000
                }
            );
            
            isTracking = true;
            showStatus('Gravação em andamento...', 'blue');
        }

        // Funções auxiliares
        function updateData(position) {
            document.getElementById('data').innerHTML = `
                <strong>Dados em tempo real:</strong><br>
                Latitude: ${position.coords.latitude}<br>
                Longitude: ${position.coords.longitude}<br>
                Precisão: ${position.coords.accuracy}m<br>
                Velocidade: ${(position.coords.speed * 3.6 || 0).toFixed(1)} km/h
            `;
        }

        function recordPosition(position) {
            // Lógica para armazenar trajeto
            console.log('Posição registrada:', position.coords);
        }

        function showStatus(text, color = 'black') {
            const status = document.getElementById('status');
            status.textContent = text;
            status.style.color = color;
        }

        function getErrorText(code) {
            const errors = {
                1: 'Permissão negada - Ative nas configurações do navegador',
                2: 'GPS indisponível - Saia para área aberta',
                3: 'Timeout - Verifique conexão'
            };
            return errors[code] || 'Erro desconhecido';
        }

        function enableAdvancedSettings() {
            // Redirecionamento automático para configurações
            window.location.href = 'https://support.google.com/chrome/answer/142065?hl=pt-BR';
        }
    </script>
</body>
</html>
